print(game.GameId)

local character = game:GetService("Players").LocalPlayer.Character
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/testakker/Roblox/refs/heads/main/Rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "testakker scripts",
    Icon = 16987271839, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "testakker scripts",
    LoadingSubtitle = "by testakker_2",
    Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 if game:GetService("Players").LocalPlayer.Character then
    local JumpPowerSlider = PlayerTab:CreateSlider({
        Name = "Jump Power",
        Range = {50, 3472},
        Increment = 1,
        Suffix = "Jump Power",
        CurrentValue = 50,
        Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
        end,
     })
     JumpPowerSlider:Set(game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower)
     local JumpHeightSlider = PlayerTab:CreateSlider({
        Name = "Jump Height",
        Range = {7.2, 500},
        Increment = 1,
        Suffix = "Jump Height",
        CurrentValue = 7.2,
        Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpHeight = Value
        end,
     })
      JumpHeightSlider:Set(game:GetService("Players").LocalPlayer.Character.Humanoid.JumpHeight)
 end

 if game.GameId == 1119466531 then
    local Toggle = PlayerTab:CreateToggle({
        Name = "Touch every orb",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            while CurrentValue == true and task.wait() do
                for i,v in workspace.orbFolder:GetChildren() do
                    for ii, vv in v:GetChildren() do
                        if vv.Name == "Gem" then
                            firetouchinterest(character.HumanoidRootPart, vv.outerGem, 0)
                        else
                            firetouchinterest(character.HumanoidRootPart, vv.outerOrb, 0)
                        end
                    end
                end
            end
        end,
     })
     local Toggle = PlayerTab:CreateToggle({
        Name = "Touch every Hoop",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            while CurrentValue == true and task.wait() do
                for i,v in workspace.Hoops:GetChildren() do
                    firetouchinterest(character.HumanoidRootPart, v, 0)
                end
            end
        end,
     })

      local Slider = PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {1, 4000},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 1,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
 })
elseif game.GameId == 6331902150 then


    local ItemsTab = Window:CreateTab("Items", 8915667153) -- Title, Image
    local KillerTab = Window:CreateTab("Killer", 949752425) -- Title, Image
    local SurvivorTab = Window:CreateTab("Survivor", 15571995199) -- Title, Image

    local namesToModify = {
        CorruptEnergy = true,
        DigitalFootprint = true,
        ["404Error"] = true,
        MassInfection = true,
        Entanglement = true,
        UnstableEye = true,
        RejuvenateTheRotten = true,
        ENRAGED = true,
        BeheadAbility = true,
        HinderedMovement = true,
        
    }

    local names2 = {
        Guest1337Charge = true,
        GuestBlocking = true,
    }

    local Multipliers = {
        Guest1337Charge = 5,
        GuestBlocking = 1,
        SlowedStatus = 1,
        PunchAbility = 1,
        MassInfection = 3,
        Entanglement = 1.5,
        UnstableEye = 0.01,
        ["404Error"] = 1,
        RejuvenateTheRotten = 0.01,
        ENRAGED = 2,
        DigitalFootprint = 1,
        CorruptEnergy = 1,
        BeheadAbility = 1.5,
        HinderedMovement = 2,
        TwoTimeStab = 1.2,
        TwoTimeCrouching = 1.5,
        SpeedStatus = 1.6,
        StunningKiller = 1,

    }

     local SpeedSlider11 = PlayerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {1, 100},
        Increment = 1,
        Suffix = "Speed",
        CurrentValue = 1,
        Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            while task.wait() do
                game:GetService("Players").LocalPlayer.Character.Humanoid:SetAttribute("BaseSpeed",Value)
            end
        end,
    })

    --SpeedSlider11:Set(game:GetService("Players").LocalPlayer.Character.Humanoid:GetAttribute("BaseSpeed"))
    
    local Toggle = ItemsTab:CreateToggle({
        Name = "Hightlight items",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            while task.wait(1) do
                if CurrentValue == true then
                   for i,v in workspace.Map.Ingame:GetChildren() do
                        if v:IsA("Tool") and not v:FindFirstChildOfClass("Highlight") then 
                            local light = Instance.new("Highlight", v)
                            light.FillTransparency = 1
                            --[[if v.Name == "BloxyCola"
                                light.OutlineColor = Color3.fromRGB(170,85,0)
                            end--]]
                        end
                    end 
                end
            end
        end,
     })

     local Toggle = SurvivorTab:CreateToggle({
        Name = "Moves 1x1x1x1's popup to the center of your screen",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
        task.spawn(function()
            while task.wait() do
                if CurrentValue == true then
                    for i,v in game.Players.LocalPlayer.PlayerGui.TemporaryUI:GetChildren() do
                        if v.Name == "1x1x1x1Popup" then
                            v.Position = UDim2.new(0.5,0,0.5,0)
                            --[[mousemoveabs(-1000, -1000)
                            mousemoveabs(350, 170)
                            mouse1click()
                            task.wait(0.01)--]]
                        end
                    end 
                end
            end
        end)

        end,
     })

     local Toggle = SurvivorTab:CreateToggle({
        Name = "Highlight killer",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
        task.spawn(function()
            while task.wait() do
                if CurrentValue == true then
                    if workspace.Players.Killers:FindFirstChildOfClass("Model") then
                        local light = Instance.new("Highlight", workspace.Players.Killers:FindFirstChildOfClass("Model"))
                        light.Name = "Kek"
                        light.FillTransparency = 0.3
                        light.OutlineColor = Color3.fromRGB(193,90,99)
                    end
                else
                    if workspace.Players.Killers:FindFirstChildOfClass("Model") and workspace.Players.Killers:FindFirstChildOfClass("Model"):FindFirstChild("Kek") then
                        workspace.Players.Killers:FindFirstChildOfClass("Model"):FindFirstChild("Kek"):Destroy()
                    end
                end
            end
        end)
        end,
     })



    local Toggle = KillerTab:CreateToggle({
        Name = "Highlight all survivors",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            task.spawn(function()
                while task.wait() do
                    if CurrentValue == true then
                        for i, v in workspace.Players.Survivors:GetChildren() do 
                            if v and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                local light = Instance.new("Highlight", v)
                                light.Name = "Kek"
                                light.FillTransparency = 0.3
                                light.OutlineColor = Color3.fromRGB(193,90,99)
                            end
                        end
                    else
                        for i, v in workspace.Players.Survivors:GetChildren() do 
                            if v and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                v:FindFirstChild("Kek"):Destroy()
                            end
                        end
                    end
                end
            end)
        end,
     })

     
    local Toggle = PlayerTab:CreateToggle({
        Name = "removing stun and buffind speed for some characters",
        CurrentValue = false,
        getgenv().EnabledModifier = CurrentValue,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            getgenv().EnabledModifier = CurrentValue
        end,
    })

        local Toggle = PlayerTab:CreateToggle({
        Name = "..inf stamina.",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            local success, err = pcall(function()
                require(game:GetService("ReplicatedStorage").Systems.Character.Game.Sprintng).StaminaLossDisabled = CurrentValue
            end)
            if not success then
                Rayfield:Notify({
                Title = "Error",
                Content = "Your executor is low level",
                Duration = 3,
                Image = 6726315940,
                })
            end
        end,
    })

     task.spawn(function()
        while task.wait(.01) do
            if game.Players.LocalPlayer.Character.Parent == workspace.Players.Survivors and getgenv().EnabledModifier == true then
                workspace.Players.Survivors:FindFirstChildOfClass("Model").SpeedMultipliers.ChildAdded:Connect(function(child)
                    if names2[child.Name] then
                        while child and task.wait() and getgenv().EnabledModifier == true do
                            child.Value = Multipliers[child.Name]
                        end 
                    end
                end)
            elseif game.Players.LocalPlayer.Character.Parent == workspace.Players.Killers and _EnabledModifier == true then
                workspace.Players.Killers:FindFirstChildOfClass("Model").SpeedMultipliers.ChildAdded:Connect(function(child)
                    if namesToModify[child.Name] then
                        while child and task.wait() and _EnabledModifier == true do 
                            child.Value = Multipliers[child.Name]
                        end
                    end
                end)
            end
        end
    end)


       --[[  local Slider = KillerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {1, 100},
        Increment = 1,
        Suffix = "Speed",
        CurrentValue = 1,
        Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
    })--]]
 elseif game.GameId == 994732206 then 
       --[[ local SpeedSlider = PlayerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {1, 1000},
        Increment = 1,
        Suffix = "Speed",
        CurrentValue = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed,
        Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
        })--]]
    --game:GetService("Players").LocalPlayer.Character
        local Dash = PlayerTab:CreateSlider({
        Name = "Dash Length",
        Range = {1, 2000},
        Increment = 1,
        Suffix = "Length",
        CurrentValue = 1,
        Flag = "Slider4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character:SetAttribute("DashLength", Value)
        end,
    })
 elseif game.GameId == 7436755782 then
    local ItemsTab = Window:CreateTab("Plants", 10970238067) -- Title, Image
    local MiscTab = Window:CreateTab("Misc", 12120687742) -- Title, Image
    local Toggle = ItemsTab:CreateToggle({
        Name = "Collect all plants",
        CurrentValue = false,
        getgenv().Collect = CurrentValue,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            getgenv().Collect = CurrentValue
            if getgenv().Collect then
                local plot = nil
                for i,v in workspace.Farm:GetDescendants() do
                    if v:FindFirstChild("Owner") then
                        if v.Owner.Value == game:GetService("Players").LocalPlayer.Name then
                            plot = v.Parent
                        end
                    end
                end

                while task.wait(.1) and getgenv().Collect == true do
                    for i,v in plot.Plants_Physical:GetDescendants() do
                        if v:FindFirstChildOfClass("ProximityPrompt") and getgenv().Collect == true then
                            v:FindFirstChildOfClass("ProximityPrompt").RequiresLineOfSight = false
                            v:FindFirstChildOfClass("ProximityPrompt").MaxActivationDistance = 9e9
                            v:FindFirstChildOfClass("ProximityPrompt"):InputHoldBegin()
                        end
                    end
                end
            end
        end,
    })

    local Toggle = MiscTab:CreateToggle({
        Name = "Auto Sell when inventory is full",
        CurrentValue = false,
        getgenv().EnabledModifier = CurrentValue,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            getgenv().EnabledModifier = CurrentValue
        end,
    })
 else
    local SpeedSlider = PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
 })
 end
