print(game.GameId)

local character = game:GetService("Players").LocalPlayer.Character
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/testakker/Roblox/refs/heads/main/Rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "testakker scripts",
    Icon = 16987271839, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "testakker scripts",
    LoadingSubtitle = "by testakker_2",
    Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 if game:GetService("Players").LocalPlayer.Character then
    local JumpPowerSlider = PlayerTab:CreateSlider({
        Name = "Jump Power",
        Range = {50, 3472},
        Increment = 1,
        Suffix = "Jump Power",
        CurrentValue = 50,
        Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
        end,
     })
     JumpPowerSlider:Set(game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower)
     local JumpHeightSlider = PlayerTab:CreateSlider({
        Name = "Jump Height",
        Range = {7.2, 500},
        Increment = 1,
        Suffix = "Jump Height",
        CurrentValue = 7.2,
        Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpHeight = Value
        end,
     })
      JumpHeightSlider:Set(game:GetService("Players").LocalPlayer.Character.Humanoid.JumpHeight)
 end

 if game.GameId == 1119466531 then
    local Toggle = PlayerTab:CreateToggle({
        Name = "Touch every orb",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            while CurrentValue == true and task.wait() do
                for i,v in workspace.orbFolder:GetChildren() do
                    for ii, vv in v:GetChildren() do
                        if vv.Name == "Gem" then
                            firetouchinterest(character.HumanoidRootPart, vv.outerGem, 0)
                        else
                            firetouchinterest(character.HumanoidRootPart, vv.outerOrb, 0)
                        end
                    end
                end
            end
        end,
     })
     local Toggle = PlayerTab:CreateToggle({
        Name = "Touch every Hoop",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            while CurrentValue == true and task.wait() do
                for i,v in workspace.Hoops:GetChildren() do
                    firetouchinterest(character.HumanoidRootPart, v, 0)
                end
            end
        end,
     })

      local Slider = PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {1, 4000},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 1,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
 })
elseif game.GameId == 6331902150 then
    


       --[[  local Slider = KillerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {1, 100},
        Increment = 1,
        Suffix = "Speed",
        CurrentValue = 1,
        Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
    })--]]
 elseif game.GameId == 994732206 then 
       --[[ local SpeedSlider = PlayerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {1, 1000},
        Increment = 1,
        Suffix = "Speed",
        CurrentValue = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed,
        Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
        })--]]
    --game:GetService("Players").LocalPlayer.Character
        local Dash = PlayerTab:CreateSlider({
        Name = "Dash Length",
        Range = {1, 2000},
        Increment = 1,
        Suffix = "Length",
        CurrentValue = 1,
        Flag = "Slider4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game:GetService("Players").LocalPlayer.Character:SetAttribute("DashLength", Value)
        end,
    })

        local Toggle = PlayerTab:CreateToggle({
        Name = "..inf energy btw you cant disable this after enabling :D",
        CurrentValue = false,
        Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            local success, err = pcall(function()
                local energy = game:GetService("Players").LocalPlayer.Character:WaitForChild("Energy")
                local energyhook
                energyhook= hookmetamethod(game, "__index", function(self, v)
                if (self == energy and v =="Value") or (self==energy and v=="MaxValue") then
                    return math.huge
                end
                    return energyhook(self, v)
                end)
            end)
            if not success then
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Your executor is low level",
                    Duration = 3,
                    Image = 6726315940,
                })
            end
        end,
    })


 elseif game.GameId == 7436755782 then
    getgenv().Collect = false
    getgenv().EnabledModifier = false
    local ItemsTab = Window:CreateTab("Plants", 10970238067) -- Title, Image
    local MiscTab = Window:CreateTab("Misc", 12120687742) -- Title, Image
    local Toggle = ItemsTab:CreateToggle({
        Name = "Collect all plants",
        CurrentValue = false,
        getgenv().Collect = CurrentValue,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            getgenv().Collect = CurrentValue
            if getgenv().Collect then
                local plot = nil
                for i,v in workspace.Farm:GetDescendants() do
                    if v:FindFirstChild("Owner") then
                        if v.Owner.Value == game:GetService("Players").LocalPlayer.Name then
                            plot = v.Parent
                        end
                    end
                end

                while task.wait(.1) and getgenv().Collect == true do
                    for i,v in plot.Plants_Physical:GetDescendants() do
                        if v:FindFirstChildOfClass("ProximityPrompt") and getgenv().Collect == true then
                            v:FindFirstChildOfClass("ProximityPrompt").RequiresLineOfSight = false
                            v:FindFirstChildOfClass("ProximityPrompt").MaxActivationDistance = 9e9
                            v:FindFirstChildOfClass("ProximityPrompt"):InputHoldBegin()
                        end
                    end
                end
            end
        end,
    })

    local Toggle = MiscTab:CreateToggle({
        Name = "Auto Sell when inventory is full",
        CurrentValue = false,
        getgenv().EnabledModifier = CurrentValue,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            CurrentValue = Value
            getgenv().EnabledModifier = CurrentValue
        end,
    })
 else
    local SpeedSlider = PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
 })
 end
